<?phpnamespace Nova\User\Http\Controllers;use App\Http\Controllers\UserController as UserController;use View;use DB;use Hash;use Auth;use Session;use Redirect;use Theme;use Datetime;use Validator;use URL;use Illuminate\Http\Request;class IndexController extends UserController {		protected $layout = 'layouts.master';	public function login()	{ 		Theme::init("default");		if(Auth::check())		{			$urlIntended = (Session::has('url.intended')) ? Session::get('url.intended') : URL::route('home');			return redirect($urlIntended);		}		$view = View('user::login');		return view($this->layout, ['content' => $view]);	}	public function register()	{ 		Theme::init("default");		if(Auth::check())		{			$urlIntended = (Session::has('url.intended')) ? Session::get('url.intended') : URL::route('home');			return Redirect::to($urlIntended);		}		$view = view("user::signup");		return view($this->layout, ['content' => $view]);	}	public function logged(Request $request)	{		if(Auth::check()){			$urlIntended = (Session::has('url.intended')) ? Session::get('url.intended') : route('home');			return redirect($urlIntended);		}		$validator = Validator::make($request->all(), [            'TxtEmail' => 'required|email',            'TxtPassword'   => 'required|min:6'        ]);		if($validator->fails())		{			return Redirect::back()->withInput()->withErrors($validator);		}		if(!Auth::attempt(['email' => $request->TxtEmail,'password' => $request->TxtPassword])){			$validator->errors()->add('TxtPassword', 'Email or password incorrect.');			return Redirect::back()->withInput()->withErrors($validator);		}		$user = Auth::user();		$user->last_login_at = date("Y-m-d H:i:s");		$user->save();		$urlIntended = (Session::has('url.intended')) ? Session::get('url.intended') : route('home');		return redirect($urlIntended);	}	public function logout()	{		// Redirect		$url = URL::route('home');    	if(Session::has('url.intended'))        {        	$url = Session::get('url.intended');		}		# Logout with fire events		Auth::logout();		Session::flush();		Session::regenerate();    	return redirect($url);	}	public function addEmailTemplate($id)	{		Theme::init("admin");		$view = View("admin::addEmailTemplate");		$template = null;		if(!empty($id)){			$template = \Nova\Admin\Models\emailTemplate::where('id','=',$id)->first();		}		$view->template = $template;		return view($this->layout, ['content' => $view])->with('module',$this->module);	}	public function store(Request $request)	{ 				if(Auth::check()){			return Redirect::route('home')->with('flash_success_message',"You are loged");		}		$messages = [			'txtEmail.unique' => 'The email has already been taken'		];		$validator = Validator::make($request->all(), [            'display_name'  => 'required|min:3',            'txtEmail' => 'required|email|unique:users,email',            'txtPassword' => 'required|min:6',            'TxtRulesOK' => 'required|accepted'        ],$messages);		if($validator->fails()){			return Redirect::back()->withInput()->withErrors($validator);		}				try{   			DB::connection()->getPdo()->beginTransaction();   			$dataUser = array(   					'display_name' => $request->display_name,		            'email'   => strtolower($request->txtEmail),		            'password'   => Hash::make($request->txtPassword),		            'active_key' => generateRandom(30),	    			'active_key_created_at' => date("Y-m-d H:i:s"),	    			'active_key_expire_at'  => date("Y-m-d H:i:s", strtotime("+2 day", time())),	    			"status" => 1,		            'last_login_at' => date("Y-m-d H:i:s"),		            'created_at' => date("Y-m-d H:i:s"),		            'updated_at' => date("Y-m-d H:i:s")		    );   			$user = \Nova\User\Models\User::create($dataUser);			$template = \Nova\Admin\Models\emailTemplate::where('slug','email_active_account')->first();						$data = array(				"display_name" => "<strong>".((!empty($user->display_name)) ? ucwords($user->display_name) : ucwords($user->l_name))."</strong>",				"email"  => $user->email,				"active_link"  => route('user.activeAccount')."?key=".$user->active_key			);			$content = parserString($template->content, $data);			sendMail($user->email, $template->subject." - ".date("d-m-Y H:i"), $content);   			DB::connection()->getPdo()->commit();        }catch (Exception $e) {            DB::connection()->getPdo()->rollBack();			return Redirect::back()->withInput()->with('flash_error_message', "Create new account failed. Please try again.");        }        $url = route('user.login');		return redirect($url)->with('success_message', "Signup success.");	}	public function storemailTemplate(Request $request)	{		Theme::init("admin");				$template_id = Request()->get('template_id');				if(!empty($template_id)){			$validator = Validator::make($request->all(), [	            'subject' => 'required|max:255',		        'description' => 'required|max:300',		        'content' => 'required'	        ]);	        if ($validator->fails()) {	            return Redirect::back()->withErrors($validator)->with("flash_error_message","Invalid params request.");	        }			$data_update = array(				'subject' => Request()->get('subject'),				'description' => Request()->get('description'),				'content' => Request()->get('content')			);			try{				DB::connection()->getPdo()->beginTransaction();				\Nova\Admin\Models\emailTemplate::where('id','=',$template_id)->update($data_update);				//Auth::user()->updateLogActivity(0, "Admin update email template ID: ".$template_id, 3);								DB::connection()->getPdo()->commit();   				return Redirect::route('admin.emailtemplate')->with('flash_success_message', 'The Template ID = '.$template_id.' have been updated successful.');			} catch (Exception $e) {	            DB::connection()->getPdo()->rollBack();	            $message = ($e->getCode() == 600) ? $e->getMessage() : 'The email template update failed.';				return Redirect::back()->withInput()->with('flash_error_message', $message);	        }				} else {		    $validator = Validator::make($request->all(), [	            'slug' => 'bail|required|unique:email_template|max:255',		        'subject' => 'required|max:255',		        'description' => 'required|max:300',		        'content' => 'required'	        ]);	        if ($validator->fails()) {	            return Redirect::back()->withErrors($validator)->with("flash_error_message","Invalid params request.");	        }			$attribute = array(				'slug' => Request()->get('slug'),				'subject' => Request()->get('subject'),				'description' => Request()->get('description'),				'content' => Request()->get('content')			);			try{				DB::connection()->getPdo()->beginTransaction();				$emailTemplate = \Nova\Admin\Models\emailTemplate::create($attribute);							//Auth::user()->updateLogActivity(0, "Admin create email template ID: ".$emailTemplate->id, 3);   				   			DB::connection()->getPdo()->commit();	   				   			return Redirect::route('admin.emailtemplate')->with('flash_success_message', 'The email template have been created successful.');			} catch (Exception $e) {	            DB::connection()->getPdo()->rollBack();	            $message = ($e->getCode() == 600) ? $e->getMessage() : 'The email template creation failed.';				return Redirect::back()->withInput()->with('flash_error_message', $message);	        }		} // end else		return Redirect::route('admin.emailtemplate');			}	public function delEmailTemplate($tem_id = 0){		//$tem_id = (int)  Request()->get('tem_id');		if(empty($tem_id)){			return Redirect::route('admin.emailtemplate')->with('flash_error_message', 'Not exists email template ID: '.$tem_id);		}		try{			DB::connection()->getPdo()->beginTransaction();			\Nova\Admin\Models\emailTemplate::where("id", $tem_id)->delete();		   			DB::connection()->getPdo()->commit();   			   			return Redirect::route('admin.emailtemplate')->with('flash_success_message', 'The email template '.$tem_id.' have been deleted successful.');		} catch (Exception $e) {            DB::connection()->getPdo()->rollBack();            $message = ($e->getCode() == 600) ? $e->getMessage() : 'Delete email template '.$tem_id.' failed.';			return Redirect::route('admin.emailtemplate')->with('flash_error_message', $message);        }        return Redirect::route('admin.emailtemplate');	}	public function change_pw(){		Theme::init("admin");		$view  = view('admin::change_pw');		return view($this->layout, ['content' => $view])->with('module',$this->module);	}	public function changePassSubmit(Request $request){		$attr = array(			'now_password'	   		=> Request()->input('TxtPassword'),			'password'	   			=> Request()->input('password'),			'password_confirmation' => Request()->input('password_confirmation')		);	    $validator = Validator::make($request->all(), [            'TxtPassword' => 'required|min:6',	        'password' => 'required|min:6|confirmed'        ]);        if ($validator->fails()) {            return Redirect::back()->withErrors($validator)->with("flash_error_message","Invalid params request.");        }		if(! Hash::check($attr["now_password"], Auth::guard("admin")->user()->password)){			return Redirect::back()->with("flash_error_message","Your current password incorrect.");		}		$admin = Auth::guard("admin")->user();		try{   			DB::connection()->getPdo()->beginTransaction();   			$admin->password = Hash::make($attr["password"]);   			$admin->updated_at = date("Y-m-d H:i:s");   			$admin->save();   			DB::connection()->getPdo()->commit();        }catch (Exception $e) {            DB::connection()->getPdo()->rollBack();            $message = ($e->getCode() == 600) ? $e->getMessage() : 'Change password failed. Please contact administration';			return Redirect::back()->with('flash_error_message', $message);        }        return Redirect::back()->with('flash_success_message', 'Change password successful.');		}	public function listMyBlog(Request $request){				Theme::init("default");		$view    = View('user::list_my_blog');		$sidebar = View('sidebar.main');		$listBlog = \Nova\Admin\Models\Post::where("user_id", Auth::id())->orderBy("id","DESC")->paginate(6);		$view->listBlog = $listBlog;				return view($this->layout, ['content' => $view,'sidebar' => $sidebar]);	}	public function detailPost($id = 0, Request $request){				Theme::init("default");		$view    = View('user::detail_post');		$sidebar = View('sidebar.main');		$view->blog = \Nova\Admin\Models\Post::where("id", $id)->first();		return view($this->layout, ['content' => $view,'sidebar' => $sidebar]);	}	public function postArticle($id = 0, Request $request){				Theme::init("default");		$view    = View('user::user_post_article');		$sidebar = View('sidebar.main');		$view->blog = \Nova\Admin\Models\Post::where("id", $id)->first();		return view($this->layout, ['content' => $view,'sidebar' => $sidebar]);	}	public function siginPostArticle(Request $request){				Session::put("url.intended",route('user.postArticle'));		return redirect(route('user.login'));	}}