<?phpnamespace Nova\User\Models;use Extend\Auth\AmoUserInterface;use Trihtm\Support\Model\Thread as Thread;use Illuminate\Database\Eloquent\Model;use Illuminate\Contracts\Auth\Authenticatable as AuthenticatableContract;use Illuminate\Contracts\Auth\CanResetPassword as CanResetPasswordContract;use Illuminate\Auth\Authenticatable;use Illuminate\Auth\Passwords\CanResetPassword;use Auth;use Request;use Trihtm\Xss\Xss;use Hash;use Datetime;use Session;class User extends Model implements AuthenticatableContract, CanResetPasswordContract {    use Authenticatable, CanResetPassword;    	public $timestamps = false;	protected $guarded = array();	public static $rules = array();	/**	 * The database table used by the model.	 *	 * @var string	 */	protected $table = 'users';	/**	 * Get the unique identifier for the user.	 *	 * @return mixed	 */	public function getAuthIdentifier()	{		return $this->getKey();	}    public function getRememberToken()    {        return $this->remember_token;    }    public function setRememberToken($value)    {        $this->remember_token = $value;    }    public function getRememberTokenName()    {        return 'remember_token';    }	/**     * Get the password for the user.     *     * @return string     */    public function getAuthPassword()    {        return $this->password;    }    /**     * Get the password temp for the user     */    public function getAuthPasswordTemp()    {        return $this->password_temp;    }    /**     * Get the ended timestamp block     */    public function getBlockEndedTime()    {        return $this->block_ended_at;    }    public function getBlockSupportEndTime()    {        return $this->support_block_ended_at;    }    public function isBlocked()    {        $time_end = $this->getBlockEndedTime();        if($time_end == NULL)        {            return false;        }        $time_end = strtotime($time_end);        if($time_end >= $_SERVER['REQUEST_TIME'])        {            return true;        }        return false;    }    public function updateFrom($from, $from_value = NULL)    {        if($this->user_from) return true; // đã có rồi thì ko update nữa.        $this->user_from        = (new Xss)->clean($from);        if($from_value != NULL)        {            $this->user_from_value  = (new Xss)->clean($from_value);        }				$this->last_login_at = new Datetime;        $this->save();    }    public function updateSessionID($null = false)    {        if($null == true)        {            $this->session_id = NULL;        }else{			$this->session_id = $null;            //$this->session_id = Session::getId();        }        $this->save();    }    public function updateSessionSSO($remove = false)    {        DB::table('sessions_sso')->where('user_id', '=', $this->id)->delete();        if($remove !== true)        {            DB::table('sessions_sso')->insert(array(                'user_id'       => $this->id,                'username'      => $this->username,                'identity'      => $this->identity,                'master_ss_id'  => $remove,                'updated_at'    => with(new \Carbon\Carbon)            ));        }    }    public function updateCookieSSO($remove = false){        if($remove !== true){            setcookie('amo_user', $remove, $_SERVER['REQUEST_TIME'] + 3600 * 24, '/', '.amo.vn');        }else{            setcookie('amo_user', null, $_SERVER['REQUEST_TIME'] - 3600 * 24, '/', '.amo.vn');        }    }    public function updateLogActivity($content, $type = 0, $content_real = '')    {    	UserActivity::create(array(    		'user_id'         => $this->getAuthIdentifier(),            'type'            => $type,    		'content'         => $content,            'content_real'    => $content_real,    		'ip'	          => Request()->ip(),    		'created_at'      => new Datetime		));    }    public function updateCampaignFrom($bid = 0)    {                if($bid != 0)        {            $credentials = [];            if($this->user_from_value != null)            {                if($this->user_from_value == 'api_aMO')                {                    $credentials['camp_id_old'] = -1;                }                else                {                    $credentials['camp_id_old'] = (int) str_replace('campaign-', '', $this->user_from_value);                }            }            else            {                $credentials['camp_id_old'] = 0;            }            $credentials['camp_id_new'] = $bid;            $credentials['user_id']     = $this->id;            $credentials['username']    = $this->username;            $credentials['created_at']  = new Datetime;            CampaignLogin::create($credentials);        }    }		public function updateTrackingLogin()    {        DB::table('tracking_login')->insert(array(            'user_id'       => $this->id,            'username'      => $this->username,            'game_id'       => 999,            'loginType_value' => 0,            'loginType'     => 0,            'login_ip'      => Request::getClientIp(),            'created_at'    => new \Carbon\Carbon,        ));    }    public function hasBirthday()    {        return ($this->birthday_at) ? true : false;    }    public function showBirthday()    {        if(!$this->hasBirthday())        {            return '';        }        $date = new Datetime($this->birthday_at);        return $date->format('d-m-Y');    }    public function showCardAt()    {        if($this->canChangeCMTND())        {            return '';        }        $date = new Datetime($this->cmtnd_at);        return $date->format('d-m-Y');    }    public function showMobile()    {        return \Trihtm\Pretty\Pretty::mobile($this->mobile);    }    public function name()    {        $display_name = !empty($this->display_name) ? $this->display_name : ($this->f_name." ".$this->l_name);        return ucwords(mb_strtolower($display_name));    }    public function showGender()    {       switch($this->gender)       {            case 1: return 'Nam'; break;            case 2: return 'Nữ'; break;            default: return 'Khác'; break;       }    }    public function showEmail()    {        return \Trihtm\Pretty\Pretty::email($this->email);    }    public function showCMTND()    {        return substr_replace($this->cmtnd, '*****', strlen($this->cmtnd) - 5);    }    public function canActiveEmail()    {    }    public function canChangeSecretQuestion()    {        return ($this->question > 0) ? false : true;    }    public function canChangeMobile()    {        return ($this->mobile) ? false : true;    }    public function canChangeCMTND()    {        return ($this->cmtnd) ? false: true;    }    public function countInfoFinal()    {        $pool = array();        $pool[] = $this->canChangeSecretQuestion();        $pool[] = $this->canChangeMobile();        $pool[] = $this->canChangeCMTND();        $count = 0;        foreach($pool as $boolean)        {            if($boolean)            {                $count += 1;            }        }        if($this->address == '')        {            $count += 1;        }        if($this->birthday_at == '')        {            $count += 1;        }        if($this->city_id == 0)        {            $count += 1;        }        return $count;    }    public function canSendSupport()    {        $count = Thread::live()->ofUser($this->id)->where('status', '!=', 'done')->count();        return ($count < 2) ? true : false;    }    public function isSupportBlocked()    {        $time_end = $this->support_block_ended_at;        if($time_end != NULL)        {            $time_end = strtotime($time_end);            if($time_end >= $_SERVER['REQUEST_TIME'])            {                return true;            }        }        return false;    }    public function linkedFacebook($profile_fb)    {        $oauth = UserOAuth::create(array(            'user_id'   => $this->id,            'username'  => strtolower(Xss::clean($profile_fb['username'])),            'email'     => strtolower($profile_fb['email']),            'oauth_id'  => $profile_fb['id'],            'provider'  => 'facebook'        ));        $this->updateLogActivity('Liên kết tài khoản với Facebook ID '.Pretty::preventID($profile_fb['id']).'.', 0, $profile_fb['id']);    }    public static function checkRegistryPermission()    {        /*$clientIp = Request::getClientIp();        $key      = md5($clientIp.'user-registry');        $limit    = 5;        $value    = Cache::get($key, 0);        if($value >= $limit)        {            return false;        }        */        return true;    }    public static function checkChecksumConnection(&$flag)    {        $flag = false;        # Kiểm tra Token        if(!Session::has('TokenConnection'))        {            return Redirect::route('home.connection');        }        $token    = Session::get('TokenConnection');        $checksum = Session::get('ChecksumConnection');        $expired  = Session::get('ExpiredConnection');        $checksum_generate = md5(implode('@#$', array(            Auth::user()->id,            'confirmConnection',            $token        )));        if($checksum != $checksum_generate || with(new \Carbon\Carbon)->getTimestamp() > $expired)        {            Session::forget('TokenConnection');            Session::forget('ChecksumConnection');            Session::forget('ExpiredConnection');            return Redirect::route('home.connection');        }        # Kết thúc kiểm tra token        $flag = true;    }    public static function createAccount(array $dataUser)    {        $user = User::create($dataUser);        //Send email request user active account                return $user;    }    public function updateAdvertise($bid, $partner)    {        Session::forget('AccountFromBID');    }    public function updateAdnetReferer($cid)    {        Session::forget('AccountFromAdnet');        DB::connection('viad_adnet')->table('adnet_registry')->insert(array(            'cid'        => $cid,            'user_id'    => $this->id,            'username'   => $this->username,            'created_at' => new Datetime        ));        $this->adnet_referer = $cid;        $this->save();    }    ////////////////////////////////////// VIP CLUB /////////////////////////////////////    public $vipArea = array();    public function getCashJoinClub($club_id)    {        if(isset($this->vipArea[$club_id]))        {            return $this->vipArea[$club_id];        }        $cash = PayTransfer::ofUser($this->id)->where('status', '=', 1)->where('game_id', '=', $club_id)->sum('cash');        $this->vipArea[$club_id] = $cash;        return $cash;    }    public function checkCashJoinClub($club_id)    {        $cash = $this->getCashJoinClub($club_id);        return ($cash >= 100000) ? true : false;    }    public function wallet()    {        $wallet = new Trihtm\Wallet\WalletRepository($this->id);        return $wallet;    }    public function totalWallet()    {        $wallet = $this->wallet();        return $wallet->getCash();    }    public function updateQuestion($question, $answer)    {        $this->question = $question;        $this->answer   = $answer;        $this->save();        $this->updateLogActivity("Cập nhật câu hỏi bí mật.");        Session::flash('userUpdateQuestionSecret', 1);    }    public function addCash($cash)    {        $cash_old = $this->cash;        $this->cash += $cash;        $this->save();        \Nova\Payment\Models\TemCashLog::create(array(            'user_id'       => Auth::id(),            'mode'          => 1,            'cash_old'      => $cash_old,            'cash_new'      => $this->cash,            'cash_add'      => $cash,            'created_at'    => date("Y-m-d H:i:s")        ));    }    public function subCash($cash)    {        $cash_old = $this->cash;        $this->cash -= $cash;        $this->save();        \Nova\Payment\Models\TemCashLog::create(array(            'user_id'       => Auth::id(),            'mode'          => 2,            'cash_old'      => $cash_old,            'cash_new'      => $this->cash,            'cash_add'      => $cash,            'created_at'    => date("Y-m-d H:i:s")        ));    }}