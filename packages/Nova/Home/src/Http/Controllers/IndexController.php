<?phpnamespace Nova\Home\Http\Controllers;use App\Http\Controllers\BaseController as BaseController;use Illuminate\Http\Request;use Theme;use Redirect;use Validator;use DB;use Session;use Auth;class IndexController extends BaseController {	protected $layout = 'layouts.master';	function __construct(){		parent::__construct();	}	public function home(){		Theme::init("default");		$view 	 = View('home::index');			$view->listBlog = \Nova\Admin\Models\Post::where("status",1)->where("published_at","<=",date("Y-m-d H:i:s"))->orderBy("id","DESC")->paginate(6);		return view($this->layout, ['content' => $view]);	}	public function storeArticle(Request $request){		$count_content = count( explode(" ",trim(strip_tags($request->content))) );				$post_id = (int) $request->post_id;		$validator = Validator::make($request->all(), [	        'title'  => 'required|min:3|max:2000',	        'intro_txt'  => 'required|min:3|max:3000',	        'content'  => 'required|min:3|max:10000',	    ]);		if($validator->fails())		{			return Redirect::back()->withInput()->withErrors($validator);		}		$err = false;		if($count_content > 5000){			$validator->errors()->add('requirement', 'Please write your post maximum 5000 words.');			$err = true;		}		$param = array(			'secret'    => "6LeqcRkTAAAAAGgDftC8hH4Jzfwosv4UwQIX0bO4",			'response'	=> $_POST["g-recaptcha-response"]		);							$query  = http_build_query($param);		$link   = "https://www.google.com/recaptcha/api/siteverify";							$captcha_json = checkGoogleCaptcha($link,$query);		$data_captcha = json_decode($captcha_json);				if(! $data_captcha->success){			$validator->errors()->add('googleCapchar', 'Please send a captcha valid.');			$err = true;		}		if($err){			return Redirect::back()->withInput()->withErrors($validator);		}		try{   			DB::connection()->getPdo()->beginTransaction();			$data = [				"user_id" => Auth::id(),				"title" => trim(strip_tags($request->title)),				"slug" => slug($request->job_title),				"intro_txt" => strip_tags($request->intro_txt,'<p><b><strong><u><i><ul><li><em><h1><h2><h3><h4><h5><h6><a><img><br/><hr><br/>'),				"content" => strip_tags($request->content,'<p><b><strong><u><i><ul><li><em><h1><h2><h3><h4><h5><h6><a><img><br/><hr><br/>'),				"status" => 0,				"updated_at" => date("Y-m-d H:i:s")			];			if(empty($post_id)){				$data["created_at"] = date("Y-m-d H:i:s");				\Nova\Admin\Models\Post::create($data);			}else{				\Nova\Admin\Models\Post::where("id",$post_id)->update($data);			}			   			DB::connection()->getPdo()->commit();        }catch (Exception $e) {            DB::connection()->getPdo()->rollBack();			return Redirect::back()->withInput()->with('error_message', $e->getMessage());        }        return Redirect::route('user.myAccount')->withInput()->with('success_message', "Your post was sent and waiting for Admin approve.");        	}}